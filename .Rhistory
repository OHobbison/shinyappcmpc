X_predict = torch_tensor(as.matrix(arvore_treino[c('DAP', 'DAP_MAXIMO', 'DAP_MEDIO', 'HT_MEDIO')]),
dtype = torch_float32(),
device = torch_device("cpu"))$unsqueeze(1)
if(n_parcela_arvore_treino == n_parcela_base_treino) {
# Treinamento e Estimação das alturas caso a condição seja válida
net <- torch::nn_module(
"Net",
initialize = function() {
self$model <- nn_sequential(
nn_linear(4, 3),
nn_sigmoid(),
nn_linear(3, 1),
nn_sigmoid()
)
},
forward = function(x) {
x %>% self$model()
}
)
#Definindo callbacks
callback_e_s = luz_callback_early_stopping(
monitor = "train_loss",
min_delta = 0.01,
patience = 50,
mode ='min')
# callback_b_m = luz_callback_keep_best_model(
#     monitor = "train_loss",
#     mode = "min",
#     min_delta = 0.01
#   )
#optimizer = optim_rmsprop,
fitted <- net %>%
setup(
#loss = nn_l1_loss(reduction = "mean"),
loss = nn_mse_loss(),
optimizer = optim_rprop,
metrics = list(luz_metric_mae(),luz_metric_mse())) %>%
set_hparams() %>%
set_opt_hparams(lr = 0.01,
step_sizes=c(1e-06, 50)) %>%
fit(data = train_dl,
epochs = 1000,
verbose = F,
accelerator = accelerator(),
callbacks= list(callback_e_s))
#dim(X_train)
#dim(X_predict)
#plot(fitted)
htest <- ifelse(arvore$DAP == 0, 0, as.numeric(predict(fitted, X_predict)))
htest <- minmax_denormalizer(values = htest,
min_value = min_max_cols[['HT']]$min[1],
max_value = min_max_cols[['HT']]$max[1])
#Verificação se é árvore medida ou árvore de campo
arvore$HT_TEST <- htest
arvore$HT_TRE <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), arvore$HT, arvore$HT_TEST)
arvore$DES_HT <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), 'MEDIDA', 'RNA')
} else {
print(i)
}
if(c == 0) {
consolidado_rna <- arvore
c=c+1
} else {
consolidado_rna <- rbind(consolidado_rna, arvore)
c=c+1
}
}
if(flag_consolidado == 0){
consolidado = consolidado_rna
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}else{
consolidado = rbind(consolidado_rna,consolidado)
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}
}
#Rodar métricas
source("metrics.R")
print(df_metrics)
#(list = ls()[ls() != "consolidado"])
cores <- ifelse(arvore$DES_HT == "MEDIDA", "green", "red")
# criar gráfico de dispersão com cores definidas
plot(consolidado_rna$DAP, consolidado_rna$HT_TRE, col = cores,
xlab = "DAP", ylab = "HT", xlim = c(0, max(na.omit(consolidado_rna$DAP))),
ylim = c(0, max(na.omit(consolidado_rna$HT_TRE))))
# plot(fitted)
#
# consolidado = consolidado %>%
#   filter(CD_PROC_IMPORTA_HUB != 102421)
#save(consolidado, file = "consolidado.Rdata")
shiny::runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
# plot(fitted)
#
consolidado = consolidado %>%
filter(CD_PROC_IMPORTA_HUB != 102344)
save(consolidado, file = "consolidado.Rdata")
#Define o diretório com funçãos e arquivos R
setwd("C:/Users/nexri/OneDrive/Área de Trabalho/Projetos/RNA SGF")
#Roda os scripts que serão utilizados
source("packages.R")
source("data_processing.R")
source("general_functions.R")
source("models.R")
#Obtem os valores únicos de CD_MEDICAO_PLANTIO para iterar
#Execução da aplicação da rede neural em cada nmed caso hajam ids novos
if(flag_rede==0){
print('Nenhum ID novo encontrado!')
}else{
contador = 0
c=0
nid= unique(data$CD_PROC_IMPORTA_HUB)
nmed <- unique(data$CD_MEDICAO)
for(i in nmed) {
print(paste("Iniciando id ",i))
contador = contador + 1
# Seleção das árvores pertecentes ao código de medição
arvore <- data[data$CD_MEDICAO == i, ]
# Seleção das árvores com valor de DAP maiores do que zero e não nulo
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP))
# Cálculo do DAP médio por talhão
dap_medio <- aggregate(
x = list(DAP_MEDIO = arvore$DAP[arvore_valida]),
by = list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = dap_medio, by=c('CD_MEDICAO'))
rm(dap_medio)
# Cálculo do DAP máximo por talhão
dap_max <- aggregate(
x = na.omit(list(DAP_MAXIMO = arvore$DAP[arvore_valida])),
by = (list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida])),
FUN = max)
arvore <- merge(x = arvore, y = dap_max, by=c('CD_MEDICAO'))
rm(dap_max)
# Cálculo do DAP relativo (Validar se está de acordo com a metodologia da CMPC)
arvore$DAP_RELATIVO <- arvore$DAP / arvore$DAP_MEDIO
# Seleção das árvores:
# com valor de DAP maiores do que zero
# com valor de HT maiores do que zero
# com valor de DAP não nula
# com valor de HT não nulas
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP) & arvore$HT > 0 & !is.na(arvore$HT))
# Cálculo da HT média por talhão
ht_medio <- aggregate(
x = list(HT_MEDIO = arvore$HT[arvore_valida]),
by = list(CD_MEDICAO= arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = ht_medio, by=c('CD_MEDICAO'))
rm(ht_medio)
#  Seleção das árvores para o treinamento da RNA
arvore_treino <- arvore[col_train]
#base_treino <- arvore[col_treino][arvore_valida,]
base_treino <- arvore[col_train][,]
base_treino[is.na(base_treino$DAP),]$DAP <- 0
base_treino[is.na(base_treino$HT),]$HT <- 0
min_max_cols = list()
for(coluna in col_normalizacao) {
colValues = base_treino[coluna][!is.na(base_treino[coluna])]
min_max_cols[[coluna]] = minmax_normalizer(values = colValues)
base_treino[coluna][!is.na(base_treino[coluna])] = unlist(min_max_cols[[coluna]]['norm_values'], use.names = FALSE)
if(coluna != 'HT') {
arvore_treino[coluna] = unlist(minmax_normalizer(
values = arvore_treino[coluna],
min_value = min_max_cols[[coluna]]$min,
max_value = min_max_cols[[coluna]]$max)['norm_values'], use.names = FALSE)
}
}
base_treino <- base_treino[col_train][arvore_valida,]
# Variáveis para validação se todas as parcelas possuem árvores medidas
n_parcela_arvore_treino <- length(unique(arvore_treino$CD_MEDICAO))
n_parcela_base_treino <- length(unique(base_treino$CD_MEDICAO))
# Dados de treinamento
X_train = torch_tensor(as.matrix(base_treino[c('DAP', 'DAP_MAXIMO', 'DAP_MEDIO', 'HT_MEDIO')]),
dtype = torch_float32(),
torch_device("cpu"))
y_train = torch_tensor(as.matrix(base_treino[,'HT']),
dtype = torch_float32(),
torch_device("cpu"))
train_ds = tensor_dataset(X_train, y_train)
train_dl = dataloader(train_ds, batch_size = nrow(arvore_treino))
# Dados a serem estimados
X_predict = torch_tensor(as.matrix(arvore_treino[c('DAP', 'DAP_MAXIMO', 'DAP_MEDIO', 'HT_MEDIO')]),
dtype = torch_float32(),
device = torch_device("cpu"))$unsqueeze(1)
if(n_parcela_arvore_treino == n_parcela_base_treino) {
# Treinamento e Estimação das alturas caso a condição seja válida
net <- torch::nn_module(
"Net",
initialize = function() {
self$model <- nn_sequential(
nn_linear(4, 3),
nn_sigmoid(),
nn_linear(3, 1),
nn_sigmoid()
)
},
forward = function(x) {
x %>% self$model()
}
)
#Definindo callbacks
callback_e_s = luz_callback_early_stopping(
monitor = "train_loss",
min_delta = 0.01,
patience = 50,
mode ='min')
# callback_b_m = luz_callback_keep_best_model(
#     monitor = "train_loss",
#     mode = "min",
#     min_delta = 0.01
#   )
#optimizer = optim_rmsprop,
fitted <- net %>%
setup(
#loss = nn_l1_loss(reduction = "mean"),
loss = nn_mse_loss(),
optimizer = optim_rprop,
metrics = list(luz_metric_mae(),luz_metric_mse())) %>%
set_hparams() %>%
set_opt_hparams(lr = 0.01,
step_sizes=c(1e-06, 50)) %>%
fit(data = train_dl,
epochs = 1000,
verbose = F,
accelerator = accelerator(),
callbacks= list(callback_e_s))
#dim(X_train)
#dim(X_predict)
#plot(fitted)
htest <- ifelse(arvore$DAP == 0, 0, as.numeric(predict(fitted, X_predict)))
htest <- minmax_denormalizer(values = htest,
min_value = min_max_cols[['HT']]$min[1],
max_value = min_max_cols[['HT']]$max[1])
#Verificação se é árvore medida ou árvore de campo
arvore$HT_TEST <- htest
arvore$HT_TRE <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), arvore$HT, arvore$HT_TEST)
arvore$DES_HT <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), 'MEDIDA', 'RNA')
} else {
print(i)
}
if(c == 0) {
consolidado_rna <- arvore
c=c+1
} else {
consolidado_rna <- rbind(consolidado_rna, arvore)
c=c+1
}
}
if(flag_consolidado == 0){
consolidado = consolidado_rna
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}else{
consolidado = rbind(consolidado_rna,consolidado)
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}
}
contador = 0
c=0
nid= unique(data$CD_PROC_IMPORTA_HUB)
nmed <- unique(data$CD_MEDICAO)
i = 1441681
print(paste("Iniciando id ",i))
contador = contador + 1
# Seleção das árvores pertecentes ao código de medição
arvore <- data[data$CD_MEDICAO == i, ]
# Seleção das árvores com valor de DAP maiores do que zero e não nulo
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP))
# Cálculo do DAP médio por talhão
dap_medio <- aggregate(
x = list(DAP_MEDIO = arvore$DAP[arvore_valida]),
by = list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = dap_medio, by=c('CD_MEDICAO'))
rm(dap_medio)
# Cálculo do DAP máximo por talhão
dap_max <- aggregate(
x = na.omit(list(DAP_MAXIMO = arvore$DAP[arvore_valida])),
by = (list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida])),
FUN = max)
arvore <- merge(x = arvore, y = dap_max, by=c('CD_MEDICAO'))
rm(dap_max)
# Cálculo do DAP relativo (Validar se está de acordo com a metodologia da CMPC)
arvore$DAP_RELATIVO <- arvore$DAP / arvore$DAP_MEDIO
# Seleção das árvores:
# com valor de DAP maiores do que zero
# com valor de HT maiores do que zero
# com valor de DAP não nula
# com valor de HT não nulas
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP) & arvore$HT > 0 & !is.na(arvore$HT))
# Cálculo da HT média por talhão
ht_medio <- aggregate(
x = list(HT_MEDIO = arvore$HT[arvore_valida]),
by = list(CD_MEDICAO= arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = ht_medio, by=c('CD_MEDICAO'))
rm(ht_medio)
#  Seleção das árvores para o treinamento da RNA
arvore_treino <- arvore[col_train]
#base_treino <- arvore[col_treino][arvore_valida,]
base_treino <- arvore[col_train][,]
base_treino[is.na(base_treino$DAP),]$DAP <- 0
base_treino[is.na(base_treino$HT),]$HT <- 0
base_treino[is.na(base_treino$DAP),]$DAP <- 0
base_treino
base_treino[is.na(base_treino$DAP),]$DAP <- 0
base_treino[is.na(base_treino$DAP),]$DAP
base_treino[is.na(base_treino$DAP),]$DAP==0
base_treino[is.na(base_treino$DAP),]$DAP>1
base_treino[is.na(base_treino$DAP),]$DAP
length(base_treino[is.na(base_treino$DAP),]$DAP) <- 0
length(base_treino[is.na(base_treino$DAP),]$DAP)
if (length(base_treino[is.na(base_treino$DAP),]$DAP)!=0){
length(base_treino[is.na(base_treino$DAP),]$DAP) <- 0
}
if (length(base_treino[is.na(base_treino$HT),]$HT)!=0){
base_treino[is.na(base_treino$HT),]$HT <- 0
}
#Define o diretório com funçãos e arquivos R
setwd("C:/Users/nexri/OneDrive/Área de Trabalho/Projetos/RNA SGF")
#Roda os scripts que serão utilizados
source("packages.R")
source("data_processing.R")
source("general_functions.R")
source("models.R")
#Obtem os valores únicos de CD_MEDICAO_PLANTIO para iterar
#Execução da aplicação da rede neural em cada nmed caso hajam ids novos
if(flag_rede==0){
print('Nenhum ID novo encontrado!')
}else{
contador = 0
c=0
nid= unique(data$CD_PROC_IMPORTA_HUB)
nmed <- unique(data$CD_MEDICAO)
for(i in nmed) {
i = 1441681
print(paste("Iniciando id ",i))
contador = contador + 1
# Seleção das árvores pertecentes ao código de medição
arvore <- data[data$CD_MEDICAO == i, ]
# Seleção das árvores com valor de DAP maiores do que zero e não nulo
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP))
# Cálculo do DAP médio por talhão
dap_medio <- aggregate(
x = list(DAP_MEDIO = arvore$DAP[arvore_valida]),
by = list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = dap_medio, by=c('CD_MEDICAO'))
rm(dap_medio)
# Cálculo do DAP máximo por talhão
dap_max <- aggregate(
x = na.omit(list(DAP_MAXIMO = arvore$DAP[arvore_valida])),
by = (list(CD_MEDICAO = arvore$CD_MEDICAO[arvore_valida])),
FUN = max)
arvore <- merge(x = arvore, y = dap_max, by=c('CD_MEDICAO'))
rm(dap_max)
# Cálculo do DAP relativo (Validar se está de acordo com a metodologia da CMPC)
arvore$DAP_RELATIVO <- arvore$DAP / arvore$DAP_MEDIO
# Seleção das árvores:
# com valor de DAP maiores do que zero
# com valor de HT maiores do que zero
# com valor de DAP não nula
# com valor de HT não nulas
arvore_valida <- (arvore$DAP>0 & !is.na(arvore$DAP) & arvore$HT > 0 & !is.na(arvore$HT))
# Cálculo da HT média por talhão
ht_medio <- aggregate(
x = list(HT_MEDIO = arvore$HT[arvore_valida]),
by = list(CD_MEDICAO= arvore$CD_MEDICAO[arvore_valida]),
FUN = mean)
arvore <- merge(x = arvore, y = ht_medio, by=c('CD_MEDICAO'))
rm(ht_medio)
#  Seleção das árvores para o treinamento da RNA
arvore_treino <- arvore[col_train]
#base_treino <- arvore[col_treino][arvore_valida,]
base_treino <- arvore[col_train][,]
#Verifica se há valores nulos, se tiver, substitui por 0
if (length(base_treino[is.na(base_treino$DAP),]$DAP)!=0){
length(base_treino[is.na(base_treino$DAP),]$DAP) <- 0
}
if (length(base_treino[is.na(base_treino$HT),]$HT)!=0){
base_treino[is.na(base_treino$HT),]$HT <- 0
}
min_max_cols = list()
for(coluna in col_normalizacao) {
colValues = base_treino[coluna][!is.na(base_treino[coluna])]
min_max_cols[[coluna]] = minmax_normalizer(values = colValues)
base_treino[coluna][!is.na(base_treino[coluna])] = unlist(min_max_cols[[coluna]]['norm_values'], use.names = FALSE)
if(coluna != 'HT') {
arvore_treino[coluna] = unlist(minmax_normalizer(
values = arvore_treino[coluna],
min_value = min_max_cols[[coluna]]$min,
max_value = min_max_cols[[coluna]]$max)['norm_values'], use.names = FALSE)
}
}
base_treino <- base_treino[col_train][arvore_valida,]
# Variáveis para validação se todas as parcelas possuem árvores medidas
n_parcela_arvore_treino <- length(unique(arvore_treino$CD_MEDICAO))
n_parcela_base_treino <- length(unique(base_treino$CD_MEDICAO))
# Dados de treinamento
X_train = torch_tensor(as.matrix(base_treino[c('DAP', 'DAP_MAXIMO', 'DAP_MEDIO', 'HT_MEDIO')]),
dtype = torch_float32(),
torch_device("cpu"))
y_train = torch_tensor(as.matrix(base_treino[,'HT']),
dtype = torch_float32(),
torch_device("cpu"))
train_ds = tensor_dataset(X_train, y_train)
train_dl = dataloader(train_ds, batch_size = nrow(arvore_treino))
# Dados a serem estimados
X_predict = torch_tensor(as.matrix(arvore_treino[c('DAP', 'DAP_MAXIMO', 'DAP_MEDIO', 'HT_MEDIO')]),
dtype = torch_float32(),
device = torch_device("cpu"))$unsqueeze(1)
if(n_parcela_arvore_treino == n_parcela_base_treino) {
# Treinamento e Estimação das alturas caso a condição seja válida
net <- torch::nn_module(
"Net",
initialize = function() {
self$model <- nn_sequential(
nn_linear(4, 3),
nn_sigmoid(),
nn_linear(3, 1),
nn_sigmoid()
)
},
forward = function(x) {
x %>% self$model()
}
)
#Definindo callbacks
callback_e_s = luz_callback_early_stopping(
monitor = "train_loss",
min_delta = 0.01,
patience = 50,
mode ='min')
# callback_b_m = luz_callback_keep_best_model(
#     monitor = "train_loss",
#     mode = "min",
#     min_delta = 0.01
#   )
#optimizer = optim_rmsprop,
fitted <- net %>%
setup(
#loss = nn_l1_loss(reduction = "mean"),
loss = nn_mse_loss(),
optimizer = optim_rprop,
metrics = list(luz_metric_mae(),luz_metric_mse())) %>%
set_hparams() %>%
set_opt_hparams(lr = 0.01,
step_sizes=c(1e-06, 50)) %>%
fit(data = train_dl,
epochs = 1000,
verbose = F,
accelerator = accelerator(),
callbacks= list(callback_e_s))
#dim(X_train)
#dim(X_predict)
#plot(fitted)
htest <- ifelse(arvore$DAP == 0, 0, as.numeric(predict(fitted, X_predict)))
htest <- minmax_denormalizer(values = htest,
min_value = min_max_cols[['HT']]$min[1],
max_value = min_max_cols[['HT']]$max[1])
#Verificação se é árvore medida ou árvore de campo
arvore$HT_TEST <- htest
arvore$HT_TRE <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), arvore$HT, arvore$HT_TEST)
arvore$DES_HT <- ifelse(arvore$HT > 0 & !is.na(arvore$HT), 'MEDIDA', 'RNA')
} else {
print(i)
}
if(c == 0) {
consolidado_rna <- arvore
c=c+1
} else {
consolidado_rna <- rbind(consolidado_rna, arvore)
c=c+1
}
}
if(flag_consolidado == 0){
consolidado = consolidado_rna
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}else{
consolidado = rbind(consolidado_rna,consolidado)
#save(consolidado, file = "consolidado.Rdata")
print("RNA aplicada com sucesso!")
}
}
#Rodar métricas
source("metrics.R")
print(df_metrics)
#(list = ls()[ls() != "consolidado"])
cores <- ifelse(arvore$DES_HT == "MEDIDA", "green", "red")
# criar gráfico de dispersão com cores definidas
plot(consolidado_rna$DAP, consolidado_rna$HT_TRE, col = cores,
xlab = "DAP", ylab = "HT", xlim = c(0, max(na.omit(consolidado_rna$DAP))),
ylim = c(0, max(na.omit(consolidado_rna$HT_TRE))))
# plot(fitted)
#
# consolidado = consolidado %>%
#   filter(CD_PROC_IMPORTA_HUB != 102344)
# save(consolidado, file = "consolidado.Rdata")
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
runApp('C:/Users/nexri/OneDrive/Área de Trabalho/Shiny App - Deploy/rna_sgf')
